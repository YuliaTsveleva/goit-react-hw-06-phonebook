{"version":3,"sources":["Components/Section/Section.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/EmptyText/EmptyText.module.css","Components/Section/Section.js","Redux/phonebook/contacts-selectors.js","Redux/phonebook/contacts-actions.js","Components/AddContactForm/AddContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/EmptyText/EmptyText.js","App.js","Redux/phonebook/contacts-reducer.js","Redux/store.js","index.js","Components/ContactItem/ContactItem.module.css","Components/AddContactForm/AddContactForm.module.css"],"names":["module","exports","Section","title","children","className","s","Title","getContacts","state","contacts","getFilter","filter","getFilteredContacts","normFilter","toLowerCase","contact","name","includes","addContact","createAction","payload","id","number","email","deleteContact","changeFilter","AddContactForm","useState","setName","setNumber","setEmail","useSelector","dispatch","useDispatch","handleChange","e","target","value","resetState","Form","autoComplete","onSubmit","preventDefault","alreadyExist","some","alert","nanoid","actions","currentTarget","reset","CONFIG","map","field","Label","label","onChange","Input","type","pattern","required","Reminder","Button","Icon","size","ContactItem","onClick","Item","Wrapper","Name","Number","TelLink","href","Email","MailLink","ContactList","contactsList","Filter","total","length","EmptyText","Text","App","contactsLength","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.342a1744.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__1N7A5\",\"Title\":\"Section_Title__20sua\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__3qdKv\",\"Input\":\"Filter_Input__u-dCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__3ajMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Text\":\"EmptyText_Text__1F9w9\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={s.Section}>\r\n      {title && <h1 className={s.Title}>{title}</h1>}\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","export const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getFilteredContacts = state => {\r\n  const { contacts, filter } = state;\r\n  const normFilter = filter.toLowerCase();\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normFilter),\r\n  );\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction(\r\n  'contacts/Add',\r\n  ({ id, name, number, email }) => ({ payload: { id, name, number, email } }),\r\n);\r\n\r\nexport const deleteContact = createAction('contacts/Delete');\r\n\r\nexport const changeFilter = createAction('contacts/ChangeFilter');\r\n","import { useState } from 'react';\r\nimport s from './AddContactForm.module.css';\r\nimport CONFIG from '../../Data/inputConfig.json';\r\nimport { AiOutlineUserAdd } from 'react-icons/ai';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../../Redux/phonebook/contacts-selectors';\r\nimport * as actions from '../../Redux/phonebook/contacts-actions';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default function AddContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    switch (e.target.name) {\r\n      case 'name':\r\n        setName(e.target.value);\r\n        break;\r\n      case 'number':\r\n        setNumber(e.target.value);\r\n        break;\r\n      case 'email':\r\n        setEmail(e.target.value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const alreadyExist = contacts.some(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (alreadyExist) {\r\n      alert(`${name} is already exists in contacts`);\r\n    } else {\r\n      const contact = { id: nanoid(), name, number, email };\r\n      dispatch(actions.addContact(contact));\r\n    }\r\n    dispatch(actions.changeFilter(''));\r\n    e.currentTarget.reset();\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setName('');\r\n    setNumber('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.Form} autoComplete=\"on\" onSubmit={handleSubmit}>\r\n      {CONFIG.map(field => {\r\n        const state = { name, number, email };\r\n        return (\r\n          <div key={field.name}>\r\n            <label className={s.Label}>\r\n              {field.label}\r\n              <input\r\n                id={field.id}\r\n                value={state[field.name]}\r\n                onChange={handleChange}\r\n                className={s.Input}\r\n                type={field.type}\r\n                name={field.name}\r\n                pattern={field.pattern}\r\n                title={field.title}\r\n                required={field.required}\r\n                autoComplete=\"true\"\r\n              />\r\n            </label>\r\n          </div>\r\n        );\r\n      })}\r\n      <p className={s.Reminder}>Fields marked with * are required</p>\r\n      <button className={s.Button} type=\"submit\">\r\n        <AiOutlineUserAdd className={s.Icon} size={16} />\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactItem.module.css';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\n\r\nfunction ContactItem({ name, number, email, onClick }) {\r\n  return (\r\n    <li className={s.Item}>\r\n      <div className={s.Wrapper}>\r\n        <p className={s.Name}>{name}:</p>\r\n        <p className={s.Number}>\r\n          <a className={s.TelLink} href={`tel:${number}`}>\r\n            {number}\r\n          </a>\r\n        </p>\r\n        <p className={s.Email}>\r\n          <a className={s.MailLink} href={`mailto:${email}`}>\r\n            {email}\r\n          </a>\r\n        </p>\r\n      </div>\r\n      <button type=\"button\" onClick={() => onClick()} className={s.Button}>\r\n        <AiFillDelete size={18} />\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  email: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport s from './ContactList.module.css';\r\nimport ContactItem from '../ContactItem';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilteredContacts } from '../../Redux/phonebook/contacts-selectors';\r\nimport * as actions from '../../Redux/phonebook/contacts-actions';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.contactsList}>\r\n      {contacts &&\r\n        contacts.map(contact => (\r\n          <ContactItem\r\n            key={contact.id}\r\n            id={contact.id}\r\n            name={contact.name}\r\n            number={contact.number}\r\n            email={contact.email}\r\n            onClick={() => onDeleteContact(contact.id)}\r\n          />\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './Filter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../Redux/phonebook/contacts-actions';\r\nimport {\r\n  getFilter,\r\n  getContacts,\r\n} from '../../Redux/phonebook/contacts-selectors';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const total = useSelector(getContacts).length;\r\n  const dispatch = useDispatch();\r\n  const onChange = e => dispatch(actions.changeFilter(e.target.value));\r\n  return (\r\n    <label className={s.Label}>\r\n      Find contact by name in {total} contacts\r\n      <input\r\n        className={s.Input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './EmptyText.module.css';\r\n\r\nconst EmptyText = () => {\r\n  return <p className={s.Text}>Your contact list is empty</p>;\r\n};\r\n\r\nexport default EmptyText;\r\n","import './App.css';\r\nimport Section from './Components/Section';\r\nimport AddContactForm from './Components/AddContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport EmptyText from './Components/EmptyText';\r\nimport { useSelector } from 'react-redux';\r\nimport { getContacts } from './Redux/phonebook/contacts-selectors';\r\n\r\nexport default function App() {\r\n  const contactsLength = useSelector(getContacts).length;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Section title=\"Phonebook\">\r\n        <AddContactForm />\r\n      </Section>\r\n      <Section title=\"Contacts\">\r\n        {contactsLength > 1 && <Filter />}\r\n\r\n        <ContactList />\r\n\r\n        {contactsLength === 0 && <EmptyText />}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './Redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"ContactItem_Item__3JRpy\",\"Wrapper\":\"ContactItem_Wrapper__3ON96\",\"Name\":\"ContactItem_Name__3AhsM\",\"Number\":\"ContactItem_Number__qpVwb\",\"Email\":\"ContactItem_Email__2O65X\",\"TelLink\":\"ContactItem_TelLink__3Zw5M\",\"MailLink\":\"ContactItem_MailLink__ACura\",\"Button\":\"ContactItem_Button__6gcvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"AddContactForm_Form__1olAz\",\"Label\":\"AddContactForm_Label__2_Rjb\",\"Input\":\"AddContactForm_Input__2otrZ\",\"Reminder\":\"AddContactForm_Reminder__F6Lsq\",\"Button\":\"AddContactForm_Button__311gz\",\"Icon\":\"AddContactForm_Icon__1bwWe\"};"],"sourceRoot":""}