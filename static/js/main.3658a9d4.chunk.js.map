{"version":3,"sources":["Components/Section/Section.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/EmptyText/EmptyText.module.css","Components/Section/Section.js","Redux/phonebook/contacts-actions.js","Components/AddContactForm/AddContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/EmptyText/EmptyText.js","App.js","Redux/phonebook/contacts-reducer.js","Redux/store.js","index.js","Components/ContactItem/ContactItem.module.css","Components/AddContactForm/AddContactForm.module.css"],"names":["module","exports","Section","title","children","className","s","Title","addContact","createAction","name","number","email","payload","id","nanoid","deleteContact","changeFilter","connect","state","contacts","phonebook","dispatch","onSubmit","actions","useState","setName","setNumber","setEmail","handleChange","e","target","value","resetState","Form","autoComplete","preventDefault","find","contact","toLowerCase","reset","CONFIG","map","field","Label","label","onChange","Input","type","pattern","required","Reminder","Button","Icon","size","ContactItem","onClick","Item","Wrapper","Name","Number","TelLink","href","Email","MailLink","getFilteredContacts","filter","includes","onDeleteContact","contactsList","total","length","EmptyText","Text","contactsLength","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","rootReducer","contactsReducer","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3658a9d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__1N7A5\",\"Title\":\"Section_Title__20sua\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__3qdKv\",\"Input\":\"Filter_Input__u-dCK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__3ajMs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Text\":\"EmptyText_Text__1F9w9\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={s.Section}>\r\n      {title && <h1 className={s.Title}>{title}</h1>}\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","// import types from './contacts-types';\r\nimport { nanoid } from 'nanoid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/Add', ({ name, number, email }) => ({\r\n  payload: {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n    email,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/Remove');\r\n\r\nconst changeFilter = createAction('contacts/ChangeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './AddContactForm.module.css';\r\nimport CONFIG from '../../Data/inputConfig.json';\r\n// import { nanoid } from 'nanoid';\r\nimport { AiOutlineUserAdd } from 'react-icons/ai';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../Redux/phonebook/contacts-actions';\r\n\r\nfunction AddContactForm({ contacts, onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n  const handleChange = e => {\r\n    switch (e.target.name) {\r\n      case 'name':\r\n        setName(e.target.value);\r\n        break;\r\n      case 'number':\r\n        setNumber(e.target.value);\r\n        break;\r\n      case 'email':\r\n        setEmail(e.target.value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const alreadyExist = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (!alreadyExist && name !== '' && number !== '') {\r\n      onSubmit({ name, number, email });\r\n    }\r\n    e.target.reset();\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setName('');\r\n    setNumber('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.Form} autoComplete=\"off\" onSubmit={handleSubmit}>\r\n      {CONFIG.map(field => (\r\n        <div key={field.name}>\r\n          <label className={s.Label}>\r\n            {field.label}\r\n            <input\r\n              id={field.id}\r\n              value={[field.name].value}\r\n              onChange={handleChange}\r\n              className={s.Input}\r\n              type={field.type}\r\n              name={field.name}\r\n              pattern={field.pattern}\r\n              title={field.title}\r\n              required={field.required}\r\n            />\r\n          </label>\r\n        </div>\r\n      ))}\r\n      <p className={s.Reminder}>Fields marked with * are required</p>\r\n      <button className={s.Button} type=\"submit\">\r\n        <AiOutlineUserAdd className={s.Icon} size={16} />\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.phonebook.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number, email) =>\r\n    dispatch(actions.addContact(name, number, email)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactItem.module.css';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\n\r\nfunction ContactItem({ name, number, email, onClick }) {\r\n  return (\r\n    <li className={s.Item}>\r\n      <div className={s.Wrapper}>\r\n        <p className={s.Name}>{name}:</p>\r\n        <p className={s.Number}>\r\n          <a className={s.TelLink} href={`tel:${number}`}>\r\n            {number}\r\n          </a>\r\n        </p>\r\n        <p className={s.Email}>\r\n          <a className={s.MailLink} href={`mailto:${email}`}>\r\n            {email}\r\n          </a>\r\n        </p>\r\n      </div>\r\n      <button type=\"button\" onClick={() => onClick()} className={s.Button}>\r\n        <AiFillDelete size={18} />\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  email: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport ContactItem from '../ContactItem';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../Redux/phonebook/contacts-actions';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={s.contactsList}>\r\n      {contacts &&\r\n        contacts.map(contact => (\r\n          <ContactItem\r\n            key={contact.id}\r\n            id={contact.id}\r\n            name={contact.name}\r\n            number={contact.number}\r\n            email={contact.email}\r\n            onClick={() => onDeleteContact(contact.id)}\r\n          />\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst getFilteredContacts = (contacts, filter) =>\r\n  contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\nconst mapStateToProps = ({ phonebook: { contacts, filter } }) => ({\r\n  contacts: getFilteredContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../Redux/phonebook/contacts-actions';\r\n\r\nconst Filter = ({ value, onChange, total }) => {\r\n  return (\r\n    <label className={s.Label}>\r\n      Find contact by name in {total} contacts\r\n      <input\r\n        className={s.Input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ phonebook: { contacts, filter } }) => ({\r\n  value: filter,\r\n  total: contacts.length,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  total: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport s from './EmptyText.module.css';\r\n\r\nconst EmptyText = () => {\r\n  return <p className={s.Text}>Your contact list is empty</p>;\r\n};\r\n\r\nexport default EmptyText;\r\n","// import { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Section from './Components/Section';\r\nimport AddContactForm from './Components/AddContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport EmptyText from './Components/EmptyText';\r\n// import { nanoid } from 'nanoid';\r\n// import { useLocalStorage } from './Hooks/UseLocalStorage';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction App({ contactsLength }) {\r\n  // const addContact = ({ name, number, email }) => {\r\n  //   const alreadyExist = contacts.find(\r\n  //     contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n  //   );\r\n  //   if (!alreadyExist && name !== '' && number !== '') {\r\n  //     setContacts(contacts => [\r\n  //       { id: nanoid(), name, number, email },\r\n  //       ...contacts,\r\n  //     ]);\r\n  //   } else if (alreadyExist) {\r\n  //     alert(`${name} is already exists in contacts`);\r\n  //   } else if (name === '' || number === '') {\r\n  //     alert('Fill in all the fields please!');\r\n  //   }\r\n  //   setFilter('');\r\n  // };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Section title=\"Phonebook\">\r\n        <AddContactForm />\r\n      </Section>\r\n      <Section title=\"Contacts\">\r\n        {contactsLength > 1 && <Filter />}\r\n\r\n        <ContactList />\r\n\r\n        {contactsLength === 0 && <EmptyText />}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsLength: state.phonebook.contacts.length,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// };\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  phonebook: contactsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: persistReducer(contactsPersistConfig, rootReducer),\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"ContactItem_Item__3JRpy\",\"Wrapper\":\"ContactItem_Wrapper__3ON96\",\"Name\":\"ContactItem_Name__3AhsM\",\"Number\":\"ContactItem_Number__qpVwb\",\"Email\":\"ContactItem_Email__2O65X\",\"TelLink\":\"ContactItem_TelLink__3Zw5M\",\"MailLink\":\"ContactItem_MailLink__ACura\",\"Button\":\"ContactItem_Button__6gcvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"AddContactForm_Form__1olAz\",\"Label\":\"AddContactForm_Label__2_Rjb\",\"Input\":\"AddContactForm_Input__2otrZ\",\"Reminder\":\"AddContactForm_Reminder__F6Lsq\",\"Button\":\"AddContactForm_Button__311gz\",\"Icon\":\"AddContactForm_Icon__1bwWe\"};"],"sourceRoot":""}